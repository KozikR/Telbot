
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000002a0  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000080  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a0  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000034f  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000224  00000000  00000000  00000797  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004a0  00000000  00000000  000009bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011e  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b8  00000000  00000000  0000102a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000010e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__vector_18>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 ea       	ldi	r30, 0xA0	; 160
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a4 31       	cpi	r26, 0x14	; 20
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>
  56:	02 d0       	rcall	.+4      	; 0x5c <main>
  58:	21 c1       	rjmp	.+578    	; 0x29c <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <main>:

int main(void)
{
	/*Init*/
	/*Configure ports*/
	LED_DDR |= LED_BLUE | LED_RED | LED_GREEN;
  5c:	87 b1       	in	r24, 0x07	; 7
  5e:	8c 61       	ori	r24, 0x1C	; 28
  60:	87 b9       	out	0x07, r24	; 7
	LED_PORT |= LED_BLUE | LED_RED;
  62:	88 b1       	in	r24, 0x08	; 8
  64:	8c 60       	ori	r24, 0x0C	; 12
  66:	88 b9       	out	0x08, r24	; 8
	
	M_LEFT_DDR |= M_LEFT_1 | M_LEFT_2;
  68:	84 b1       	in	r24, 0x04	; 4
  6a:	80 6c       	ori	r24, 0xC0	; 192
  6c:	84 b9       	out	0x04, r24	; 4
	M_RIGHT_DDR_1 |= M_RIGHT_1;
  6e:	20 9a       	sbi	0x04, 0	; 4
	M_RIGHT_DDR_2 |= M_RIGHT_2;
  70:	57 9a       	sbi	0x0a, 7	; 10
	M_PWM_DDR |= M_PWM_A | M_PWM_B;
  72:	8a b1       	in	r24, 0x0a	; 10
  74:	80 66       	ori	r24, 0x60	; 96
  76:	8a b9       	out	0x0a, r24	; 10
	
	/*UART*/
	UBRR0 = 25; /*19200 B*/
  78:	89 e1       	ldi	r24, 0x19	; 25
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	90 93 c5 00 	sts	0x00C5, r25
  80:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  84:	88 e9       	ldi	r24, 0x98	; 152
  86:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);	/*8-bit*/
  8a:	86 e0       	ldi	r24, 0x06	; 6
  8c:	80 93 c2 00 	sts	0x00C2, r24
	
	/*ADC*/
	ADMUX = (1<<REFS0)|(0<<REFS1)|(1<<ADLAR); /*AVCC*/
  90:	80 e6       	ldi	r24, 0x60	; 96
  92:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN);
  96:	80 e8       	ldi	r24, 0x80	; 128
  98:	80 93 7a 00 	sts	0x007A, r24
	
	/*Timer0*/
	TCCR0A = (1<<COM0A1)|(0<<COM0A0)|(1<<COM0B1)|(0<<COM0B0)|(1<<WGM01)|(1<<WGM00); /*non-inverting mode, Fast PWM*/
  9c:	83 ea       	ldi	r24, 0xA3	; 163
  9e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01); /*clk/8*/
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
  a4:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
  a6:	18 bc       	out	0x28, r1	; 40
	/*Enable interrupts*/
	sei();	
  a8:	78 94       	sei
	
	motor(RIGHT, BACK, 200);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	48 ec       	ldi	r20, 0xC8	; 200
  b0:	ba d0       	rcall	.+372    	; 0x226 <motor>
	motor(LEFT, BACK, 200);
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	48 ec       	ldi	r20, 0xC8	; 200
  b8:	b6 d0       	rcall	.+364    	; 0x226 <motor>
	
	/*Main loop*/
	while(1)
	{
		LED_PORT ^= LED_BLUE;
  ba:	48 e0       	ldi	r20, 0x08	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	28 ec       	ldi	r18, 0xC8	; 200
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	88 b1       	in	r24, 0x08	; 8
  c2:	84 27       	eor	r24, r20
  c4:	88 b9       	out	0x08, r24	; 8
  c6:	80 ed       	ldi	r24, 0xD0	; 208
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x70>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d2:	d9 f7       	brne	.-10     	; 0xca <main+0x6e>
  d4:	f5 cf       	rjmp	.-22     	; 0xc0 <main+0x64>

000000d6 <__vector_18>:
#include "uart.h"
#include "motor.h"

/*Interrupts*/
ISR(USART_RX_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	4f 93       	push	r20
  e6:	5f 93       	push	r21
  e8:	6f 93       	push	r22
  ea:	7f 93       	push	r23
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	af 93       	push	r26
  f2:	bf 93       	push	r27
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
	cli();
  f8:	f8 94       	cli
	char a = UDR0;
  fa:	80 91 c6 00 	lds	r24, 0x00C6
	if(a == '1')	LED_PORT ^= LED_RED;
  fe:	81 33       	cpi	r24, 0x31	; 49
 100:	29 f4       	brne	.+10     	; 0x10c <__vector_18+0x36>
 102:	88 b1       	in	r24, 0x08	; 8
 104:	94 e0       	ldi	r25, 0x04	; 4
 106:	89 27       	eor	r24, r25
 108:	88 b9       	out	0x08, r24	; 8
 10a:	14 c0       	rjmp	.+40     	; 0x134 <__vector_18+0x5e>
	if(a == '2')
 10c:	82 33       	cpi	r24, 0x32	; 50
 10e:	91 f4       	brne	.+36     	; 0x134 <__vector_18+0x5e>
	{
		send_string("FRONT:");
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	74 d0       	rcall	.+232    	; 0x1fe <send_string>
		send_number(get_ADC(GROUND_FRONT));
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	1f d0       	rcall	.+62     	; 0x158 <get_ADC>
 11a:	47 d0       	rcall	.+142    	; 0x1aa <send_number>
		send_string("BACK:");
 11c:	87 e0       	ldi	r24, 0x07	; 7
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	6e d0       	rcall	.+220    	; 0x1fe <send_string>
		send_number(get_ADC(GROUND_BACK));
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	19 d0       	rcall	.+50     	; 0x158 <get_ADC>
 126:	41 d0       	rcall	.+130    	; 0x1aa <send_number>
		send_string("POWER:");
 128:	8d e0       	ldi	r24, 0x0D	; 13
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	68 d0       	rcall	.+208    	; 0x1fe <send_string>
		send_number(get_ADC(POWER));
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	13 d0       	rcall	.+38     	; 0x158 <get_ADC>
 132:	3b d0       	rcall	.+118    	; 0x1aa <send_number>
	}
	sei();
 134:	78 94       	sei
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	7f 91       	pop	r23
 144:	6f 91       	pop	r22
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <get_ADC>:
*********************************/
#include "adc.h"

char get_ADC(char chanel)
{
	ADMUX &= 0xf0; 
 158:	90 91 7c 00 	lds	r25, 0x007C
 15c:	90 7f       	andi	r25, 0xF0	; 240
 15e:	90 93 7c 00 	sts	0x007C, r25
	ADMUX |= chanel; 
 162:	90 91 7c 00 	lds	r25, 0x007C
 166:	98 2b       	or	r25, r24
 168:	90 93 7c 00 	sts	0x007C, r25
  
	ADCSRA |= 1<<ADSC; 
 16c:	80 91 7a 00 	lds	r24, 0x007A
 170:	80 64       	ori	r24, 0x40	; 64
 172:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & (1 << ADIF));  
 176:	80 91 7a 00 	lds	r24, 0x007A
 17a:	84 fd       	sbrc	r24, 4
 17c:	fc cf       	rjmp	.-8      	; 0x176 <get_ADC+0x1e>
	ADCSRA &= ~((1 << ADSC) | (1 << ADIF));
 17e:	80 91 7a 00 	lds	r24, 0x007A
 182:	8f 7a       	andi	r24, 0xAF	; 175
 184:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= 1<<ADSC; 
 188:	80 91 7a 00 	lds	r24, 0x007A
 18c:	80 64       	ori	r24, 0x40	; 64
 18e:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & (1 << ADIF));  
 192:	80 91 7a 00 	lds	r24, 0x007A
 196:	84 fd       	sbrc	r24, 4
 198:	fc cf       	rjmp	.-8      	; 0x192 <get_ADC+0x3a>
	ADCSRA &= ~((1 << ADSC) | (1 << ADIF));
 19a:	80 91 7a 00 	lds	r24, 0x007A
 19e:	8f 7a       	andi	r24, 0xAF	; 175
 1a0:	80 93 7a 00 	sts	0x007A, r24
	
	return ADCH;
 1a4:	80 91 79 00 	lds	r24, 0x0079
 1a8:	08 95       	ret

000001aa <send_number>:
UART
*********************************/
#include "uart.h"

void send_number(char n)
{
 1aa:	28 2f       	mov	r18, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
 1ac:	80 91 c0 00 	lds	r24, 0x00C0
 1b0:	85 ff       	sbrs	r24, 5
 1b2:	fc cf       	rjmp	.-8      	; 0x1ac <send_number+0x2>
	UDR0 = n/100+'0';
 1b4:	82 2f       	mov	r24, r18
 1b6:	64 e6       	ldi	r22, 0x64	; 100
 1b8:	65 d0       	rcall	.+202    	; 0x284 <__udivmodqi4>
 1ba:	80 5d       	subi	r24, 0xD0	; 208
 1bc:	80 93 c6 00 	sts	0x00C6, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
 1c0:	80 91 c0 00 	lds	r24, 0x00C0
 1c4:	85 ff       	sbrs	r24, 5
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <send_number+0x16>
	UDR0 = (n%100)/10+'0';
 1c8:	82 2f       	mov	r24, r18
 1ca:	64 e6       	ldi	r22, 0x64	; 100
 1cc:	5b d0       	rcall	.+182    	; 0x284 <__udivmodqi4>
 1ce:	89 2f       	mov	r24, r25
 1d0:	6a e0       	ldi	r22, 0x0A	; 10
 1d2:	58 d0       	rcall	.+176    	; 0x284 <__udivmodqi4>
 1d4:	80 5d       	subi	r24, 0xD0	; 208
 1d6:	80 93 c6 00 	sts	0x00C6, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
 1da:	80 91 c0 00 	lds	r24, 0x00C0
 1de:	85 ff       	sbrs	r24, 5
 1e0:	fc cf       	rjmp	.-8      	; 0x1da <send_number+0x30>
	UDR0 = (n%10)+'0';
 1e2:	82 2f       	mov	r24, r18
 1e4:	6a e0       	ldi	r22, 0x0A	; 10
 1e6:	4e d0       	rcall	.+156    	; 0x284 <__udivmodqi4>
 1e8:	90 5d       	subi	r25, 0xD0	; 208
 1ea:	90 93 c6 00 	sts	0x00C6, r25
	while ( !( UCSR0A & (1<<UDRE0)) );
 1ee:	80 91 c0 00 	lds	r24, 0x00C0
 1f2:	85 ff       	sbrs	r24, 5
 1f4:	fc cf       	rjmp	.-8      	; 0x1ee <send_number+0x44>
	UDR0 = ENTER;
 1f6:	8d e0       	ldi	r24, 0x0D	; 13
 1f8:	80 93 c6 00 	sts	0x00C6, r24
}
 1fc:	08 95       	ret

000001fe <send_string>:

void send_string(char* data)
{
 1fe:	fc 01       	movw	r30, r24
 200:	07 c0       	rjmp	.+14     	; 0x210 <send_string+0x12>
	int i = 0;
	while(data[i] != '\0')
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
 202:	80 91 c0 00 	lds	r24, 0x00C0
 206:	85 ff       	sbrs	r24, 5
 208:	fc cf       	rjmp	.-8      	; 0x202 <send_string+0x4>
		UDR0 = data[i];
 20a:	90 93 c6 00 	sts	0x00C6, r25
 20e:	31 96       	adiw	r30, 0x01	; 1
}

void send_string(char* data)
{
	int i = 0;
	while(data[i] != '\0')
 210:	90 81       	ld	r25, Z
 212:	99 23       	and	r25, r25
 214:	b1 f7       	brne	.-20     	; 0x202 <send_string+0x4>
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
		UDR0 = data[i];
		i++;
	}
	while ( !( UCSR0A & (1<<UDRE0)) );
 216:	80 91 c0 00 	lds	r24, 0x00C0
 21a:	85 ff       	sbrs	r24, 5
 21c:	fc cf       	rjmp	.-8      	; 0x216 <send_string+0x18>
	UDR0 = ENTER;
 21e:	8d e0       	ldi	r24, 0x0D	; 13
 220:	80 93 c6 00 	sts	0x00C6, r24
 224:	08 95       	ret

00000226 <motor>:
#include "motor.h"
#include "board_def.h"

void motor(char side, char state, char pwm)
{
	if(side == LEFT)
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	91 f4       	brne	.+36     	; 0x24e <motor+0x28>
	{
		OCR0A = pwm;
 22a:	47 bd       	out	0x27, r20	; 39
		switch(state)
 22c:	61 30       	cpi	r22, 0x01	; 1
 22e:	49 f0       	breq	.+18     	; 0x242 <motor+0x1c>
 230:	61 30       	cpi	r22, 0x01	; 1
 232:	18 f0       	brcs	.+6      	; 0x23a <motor+0x14>
 234:	62 30       	cpi	r22, 0x02	; 2
 236:	e9 f4       	brne	.+58     	; 0x272 <motor+0x4c>
 238:	07 c0       	rjmp	.+14     	; 0x248 <motor+0x22>
		{
			case STOP:
				M_LEFT_PORT &= ~(M_LEFT_1 | M_LEFT_2);
 23a:	85 b1       	in	r24, 0x05	; 5
 23c:	8f 73       	andi	r24, 0x3F	; 63
 23e:	85 b9       	out	0x05, r24	; 5
 240:	08 95       	ret
				break;
			case FORWARD:
				M_LEFT_PORT &= ~M_LEFT_1;
 242:	2e 98       	cbi	0x05, 6	; 5
				M_LEFT_PORT |= M_LEFT_2;
 244:	2f 9a       	sbi	0x05, 7	; 5
 246:	08 95       	ret
				break;
			case BACK:
				M_LEFT_PORT |= M_LEFT_1;
 248:	2e 9a       	sbi	0x05, 6	; 5
				M_LEFT_PORT &= ~M_LEFT_2;
 24a:	2f 98       	cbi	0x05, 7	; 5
 24c:	08 95       	ret
				break;
			default:
				break;
		}
	}
	else if(side == RIGHT)
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	81 f4       	brne	.+32     	; 0x272 <motor+0x4c>
	{
		OCR0B = pwm;
 252:	48 bd       	out	0x28, r20	; 40
		switch(state)
 254:	61 30       	cpi	r22, 0x01	; 1
 256:	41 f0       	breq	.+16     	; 0x268 <motor+0x42>
 258:	61 30       	cpi	r22, 0x01	; 1
 25a:	18 f0       	brcs	.+6      	; 0x262 <motor+0x3c>
 25c:	62 30       	cpi	r22, 0x02	; 2
 25e:	49 f4       	brne	.+18     	; 0x272 <motor+0x4c>
 260:	06 c0       	rjmp	.+12     	; 0x26e <motor+0x48>
		{
			case STOP:
				M_RIGHT_PORT_1 &= ~M_RIGHT_1;
 262:	28 98       	cbi	0x05, 0	; 5
				M_RIGHT_PORT_2 &= ~M_RIGHT_2;
 264:	5f 98       	cbi	0x0b, 7	; 11
 266:	08 95       	ret
				break;
			case FORWARD:
				M_RIGHT_PORT_1 &= ~M_RIGHT_1;
 268:	28 98       	cbi	0x05, 0	; 5
				M_RIGHT_PORT_2 |= M_RIGHT_2;
 26a:	5f 9a       	sbi	0x0b, 7	; 11
 26c:	08 95       	ret
				break;
			case BACK:
				M_RIGHT_PORT_1 |= M_RIGHT_1;
 26e:	28 9a       	sbi	0x05, 0	; 5
				M_RIGHT_PORT_2 &= ~M_RIGHT_2;
 270:	5f 98       	cbi	0x0b, 7	; 11
 272:	08 95       	ret

00000274 <stop>:
	}
}

void stop(void)
{
	OCR0A = 0;
 274:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 276:	18 bc       	out	0x28, r1	; 40
	M_LEFT_PORT &= ~(M_LEFT_1 | M_LEFT_2);
 278:	85 b1       	in	r24, 0x05	; 5
 27a:	8f 73       	andi	r24, 0x3F	; 63
 27c:	85 b9       	out	0x05, r24	; 5
	M_RIGHT_PORT_1 &= ~M_RIGHT_1;
 27e:	28 98       	cbi	0x05, 0	; 5
	M_RIGHT_PORT_2 &= ~M_RIGHT_2;
 280:	5f 98       	cbi	0x0b, 7	; 11
}
 282:	08 95       	ret

00000284 <__udivmodqi4>:
 284:	99 1b       	sub	r25, r25
 286:	79 e0       	ldi	r23, 0x09	; 9
 288:	04 c0       	rjmp	.+8      	; 0x292 <__udivmodqi4_ep>

0000028a <__udivmodqi4_loop>:
 28a:	99 1f       	adc	r25, r25
 28c:	96 17       	cp	r25, r22
 28e:	08 f0       	brcs	.+2      	; 0x292 <__udivmodqi4_ep>
 290:	96 1b       	sub	r25, r22

00000292 <__udivmodqi4_ep>:
 292:	88 1f       	adc	r24, r24
 294:	7a 95       	dec	r23
 296:	c9 f7       	brne	.-14     	; 0x28a <__udivmodqi4_loop>
 298:	80 95       	com	r24
 29a:	08 95       	ret

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>


main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000021c  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000060  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007b  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000294  00000000  00000000  0000037f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a1  00000000  00000000  00000613  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000035f  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000100  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000009a  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	4a c0       	rjmp	.+148    	; 0xba <__vector_18>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec e1       	ldi	r30, 0x1C	; 28
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a4 31       	cpi	r26, 0x14	; 20
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>
  56:	02 d0       	rcall	.+4      	; 0x5c <main>
  58:	df c0       	rjmp	.+446    	; 0x218 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <main>:

int main(void)
{
	/*Init*/
	/*Configure ports*/
	LED_DDR |= LED_BLUE | LED_RED | LED_GREEN;
  5c:	87 b1       	in	r24, 0x07	; 7
  5e:	8c 61       	ori	r24, 0x1C	; 28
  60:	87 b9       	out	0x07, r24	; 7
	LED_PORT |= LED_BLUE | LED_RED;
  62:	88 b1       	in	r24, 0x08	; 8
  64:	8c 60       	ori	r24, 0x0C	; 12
  66:	88 b9       	out	0x08, r24	; 8
	
	M_LEFT_DDR |= M_LEFT_1 | M_LEFT_2;
  68:	84 b1       	in	r24, 0x04	; 4
  6a:	80 6c       	ori	r24, 0xC0	; 192
  6c:	84 b9       	out	0x04, r24	; 4
	M_RIGHT_DDR_1 |= M_RIGHT_1;
  6e:	20 9a       	sbi	0x04, 0	; 4
	M_RIGHT_DDR_2 |= M_RIGHT_2;
  70:	57 9a       	sbi	0x0a, 7	; 10
	M_PWM_DDR |= M_PWM_A | M_PWM_B;
  72:	8a b1       	in	r24, 0x0a	; 10
  74:	80 66       	ori	r24, 0x60	; 96
  76:	8a b9       	out	0x0a, r24	; 10
	
	/*UART*/
	UBRR0 = 25; /*19200 B*/
  78:	89 e1       	ldi	r24, 0x19	; 25
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	90 93 c5 00 	sts	0x00C5, r25
  80:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  84:	88 e9       	ldi	r24, 0x98	; 152
  86:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);	/*8-bit*/
  8a:	86 e0       	ldi	r24, 0x06	; 6
  8c:	80 93 c2 00 	sts	0x00C2, r24
	
	/*ADC*/
	ADMUX = (1<<REFS0)|(0<<REFS1)|(1<<ADLAR); /*AVCC*/
  90:	80 e6       	ldi	r24, 0x60	; 96
  92:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN);
  96:	80 e8       	ldi	r24, 0x80	; 128
  98:	80 93 7a 00 	sts	0x007A, r24
	
	sei();	/*Enable interrupts*/
  9c:	78 94       	sei
	
	/*Main loop*/
	while(1)
	{
		LED_PORT ^= LED_BLUE;
  9e:	48 e0       	ldi	r20, 0x08	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	28 ec       	ldi	r18, 0xC8	; 200
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	88 b1       	in	r24, 0x08	; 8
  a6:	84 27       	eor	r24, r20
  a8:	88 b9       	out	0x08, r24	; 8
  aa:	80 ed       	ldi	r24, 0xD0	; 208
  ac:	97 e0       	ldi	r25, 0x07	; 7
  ae:	f9 01       	movw	r30, r18
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x54>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b6:	d9 f7       	brne	.-10     	; 0xae <main+0x52>
  b8:	f5 cf       	rjmp	.-22     	; 0xa4 <main+0x48>

000000ba <__vector_18>:
#include "board_def.h"
#include "adc.h"

/*Interrupts*/
ISR(USART_RX_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	cli();
  dc:	f8 94       	cli
	char a = UDR0;
  de:	80 91 c6 00 	lds	r24, 0x00C6
	if(a == '1')	LED_PORT ^= LED_RED;
  e2:	81 33       	cpi	r24, 0x31	; 49
  e4:	29 f4       	brne	.+10     	; 0xf0 <__vector_18+0x36>
  e6:	88 b1       	in	r24, 0x08	; 8
  e8:	94 e0       	ldi	r25, 0x04	; 4
  ea:	89 27       	eor	r24, r25
  ec:	88 b9       	out	0x08, r24	; 8
  ee:	1d c0       	rjmp	.+58     	; 0x12a <__vector_18+0x70>
	if(a == '2')
  f0:	82 33       	cpi	r24, 0x32	; 50
  f2:	d9 f4       	brne	.+54     	; 0x12a <__vector_18+0x70>
	{
		send_string("FRONT:");
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	6f d0       	rcall	.+222    	; 0x1d8 <send_string>
		get_ADC(GROUND_FRONT);
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	28 d0       	rcall	.+80     	; 0x14e <get_ADC>
		send_number(get_ADC(GROUND_FRONT));
  fe:	85 e0       	ldi	r24, 0x05	; 5
 100:	26 d0       	rcall	.+76     	; 0x14e <get_ADC>
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	3f d0       	rcall	.+126    	; 0x184 <send_number>
		send_string("BACK:");
 106:	87 e0       	ldi	r24, 0x07	; 7
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	66 d0       	rcall	.+204    	; 0x1d8 <send_string>
		get_ADC(GROUND_BACK);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	1f d0       	rcall	.+62     	; 0x14e <get_ADC>
		send_number(get_ADC(GROUND_BACK));
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	1d d0       	rcall	.+58     	; 0x14e <get_ADC>
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	36 d0       	rcall	.+108    	; 0x184 <send_number>
		send_string("POWER:");
 118:	8d e0       	ldi	r24, 0x0D	; 13
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	5d d0       	rcall	.+186    	; 0x1d8 <send_string>
		get_ADC(POWER);
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	16 d0       	rcall	.+44     	; 0x14e <get_ADC>
		send_number(get_ADC(POWER));
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	14 d0       	rcall	.+40     	; 0x14e <get_ADC>
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	2d d0       	rcall	.+90     	; 0x184 <send_number>
	}
	sei();
 12a:	78 94       	sei
}
 12c:	ff 91       	pop	r31
 12e:	ef 91       	pop	r30
 130:	bf 91       	pop	r27
 132:	af 91       	pop	r26
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	7f 91       	pop	r23
 13a:	6f 91       	pop	r22
 13c:	5f 91       	pop	r21
 13e:	4f 91       	pop	r20
 140:	3f 91       	pop	r19
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <get_ADC>:
*********************************/
#include "adc.h"

char get_ADC(char chanel)
{
  ADMUX &= 0xf0; 
 14e:	90 91 7c 00 	lds	r25, 0x007C
 152:	90 7f       	andi	r25, 0xF0	; 240
 154:	90 93 7c 00 	sts	0x007C, r25
  ADMUX |= chanel; 
 158:	90 91 7c 00 	lds	r25, 0x007C
 15c:	98 2b       	or	r25, r24
 15e:	90 93 7c 00 	sts	0x007C, r25
  
  ADCSRA |= 1<<ADSC; 
 162:	80 91 7a 00 	lds	r24, 0x007A
 166:	80 64       	ori	r24, 0x40	; 64
 168:	80 93 7a 00 	sts	0x007A, r24
  while(ADCSRA & (1 << ADIF));  
 16c:	80 91 7a 00 	lds	r24, 0x007A
 170:	84 fd       	sbrc	r24, 4
 172:	fc cf       	rjmp	.-8      	; 0x16c <get_ADC+0x1e>
  ADCSRA &= ~((1 << ADSC) | (1 << ADIF)); 
 174:	80 91 7a 00 	lds	r24, 0x007A
 178:	8f 7a       	andi	r24, 0xAF	; 175
 17a:	80 93 7a 00 	sts	0x007A, r24
  return ADCH;
 17e:	80 91 79 00 	lds	r24, 0x0079
 182:	08 95       	ret

00000184 <send_number>:
UART
*********************************/
#include "uart.h"

void send_number(char n)
{
 184:	28 2f       	mov	r18, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
 186:	80 91 c0 00 	lds	r24, 0x00C0
 18a:	85 ff       	sbrs	r24, 5
 18c:	fc cf       	rjmp	.-8      	; 0x186 <send_number+0x2>
	UDR0 = n/100+'0';
 18e:	82 2f       	mov	r24, r18
 190:	64 e6       	ldi	r22, 0x64	; 100
 192:	36 d0       	rcall	.+108    	; 0x200 <__udivmodqi4>
 194:	80 5d       	subi	r24, 0xD0	; 208
 196:	80 93 c6 00 	sts	0x00C6, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
 19a:	80 91 c0 00 	lds	r24, 0x00C0
 19e:	85 ff       	sbrs	r24, 5
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <send_number+0x16>
	UDR0 = (n%100)/10+'0';
 1a2:	82 2f       	mov	r24, r18
 1a4:	64 e6       	ldi	r22, 0x64	; 100
 1a6:	2c d0       	rcall	.+88     	; 0x200 <__udivmodqi4>
 1a8:	89 2f       	mov	r24, r25
 1aa:	6a e0       	ldi	r22, 0x0A	; 10
 1ac:	29 d0       	rcall	.+82     	; 0x200 <__udivmodqi4>
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	80 93 c6 00 	sts	0x00C6, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
 1b4:	80 91 c0 00 	lds	r24, 0x00C0
 1b8:	85 ff       	sbrs	r24, 5
 1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <send_number+0x30>
	UDR0 = (n%10)+'0';
 1bc:	82 2f       	mov	r24, r18
 1be:	6a e0       	ldi	r22, 0x0A	; 10
 1c0:	1f d0       	rcall	.+62     	; 0x200 <__udivmodqi4>
 1c2:	90 5d       	subi	r25, 0xD0	; 208
 1c4:	90 93 c6 00 	sts	0x00C6, r25
	while ( !( UCSR0A & (1<<UDRE0)) );
 1c8:	80 91 c0 00 	lds	r24, 0x00C0
 1cc:	85 ff       	sbrs	r24, 5
 1ce:	fc cf       	rjmp	.-8      	; 0x1c8 <send_number+0x44>
	UDR0 = ENTER;
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
 1d2:	80 93 c6 00 	sts	0x00C6, r24
}
 1d6:	08 95       	ret

000001d8 <send_string>:

void send_string(char* data)
{
 1d8:	fc 01       	movw	r30, r24
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <send_string+0x12>
	int i = 0;
	while(data[i] != '\0')
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
 1dc:	80 91 c0 00 	lds	r24, 0x00C0
 1e0:	85 ff       	sbrs	r24, 5
 1e2:	fc cf       	rjmp	.-8      	; 0x1dc <send_string+0x4>
		UDR0 = data[i];
 1e4:	90 93 c6 00 	sts	0x00C6, r25
 1e8:	31 96       	adiw	r30, 0x01	; 1
}

void send_string(char* data)
{
	int i = 0;
	while(data[i] != '\0')
 1ea:	90 81       	ld	r25, Z
 1ec:	99 23       	and	r25, r25
 1ee:	b1 f7       	brne	.-20     	; 0x1dc <send_string+0x4>
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
		UDR0 = data[i];
		i++;
	}
	while ( !( UCSR0A & (1<<UDRE0)) );
 1f0:	80 91 c0 00 	lds	r24, 0x00C0
 1f4:	85 ff       	sbrs	r24, 5
 1f6:	fc cf       	rjmp	.-8      	; 0x1f0 <send_string+0x18>
	UDR0 = ENTER;
 1f8:	8d e0       	ldi	r24, 0x0D	; 13
 1fa:	80 93 c6 00 	sts	0x00C6, r24
 1fe:	08 95       	ret

00000200 <__udivmodqi4>:
 200:	99 1b       	sub	r25, r25
 202:	79 e0       	ldi	r23, 0x09	; 9
 204:	04 c0       	rjmp	.+8      	; 0x20e <__udivmodqi4_ep>

00000206 <__udivmodqi4_loop>:
 206:	99 1f       	adc	r25, r25
 208:	96 17       	cp	r25, r22
 20a:	08 f0       	brcs	.+2      	; 0x20e <__udivmodqi4_ep>
 20c:	96 1b       	sub	r25, r22

0000020e <__udivmodqi4_ep>:
 20e:	88 1f       	adc	r24, r24
 210:	7a 95       	dec	r23
 212:	c9 f7       	brne	.-14     	; 0x206 <__udivmodqi4_loop>
 214:	80 95       	com	r24
 216:	08 95       	ret

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>


main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000013  00800100  00800100  00000756  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000100  00000000  00000000  000007d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003e9  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000229  00000000  00000000  00000cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006c5  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  000015b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a2  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000137  00000000  00000000  00001822  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001959  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 31       	cpi	r26, 0x13	; 19
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	a5 d0       	rcall	.+330    	; 0x19c <main>
  52:	45 c3       	rjmp	.+1674   	; 0x6de <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <send_sensor_data>:
volatile unsigned char current_sensor = 0;


/*Functions*/
void send_sensor_data(char sesnor_number)
{
  56:	98 2f       	mov	r25, r24
	unsigned char data = 0;
	while ( !( UCSR0A & (1<<UDRE0)) );
  58:	80 91 c0 00 	lds	r24, 0x00C0
  5c:	85 ff       	sbrs	r24, 5
  5e:	fc cf       	rjmp	.-8      	; 0x58 <send_sensor_data+0x2>
	switch(sesnor_number)
  60:	91 30       	cpi	r25, 0x01	; 1
  62:	59 f0       	breq	.+22     	; 0x7a <send_sensor_data+0x24>
  64:	91 30       	cpi	r25, 0x01	; 1
  66:	20 f0       	brcs	.+8      	; 0x70 <send_sensor_data+0x1a>
  68:	92 30       	cpi	r25, 0x02	; 2
  6a:	61 f0       	breq	.+24     	; 0x84 <send_sensor_data+0x2e>
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	10 c0       	rjmp	.+32     	; 0x90 <send_sensor_data+0x3a>
	{
		case 0:
			data = get_ADC(POWER);
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	87 d2       	rcall	.+1294   	; 0x582 <get_ADC>
  74:	28 2f       	mov	r18, r24
			UDR0 = 'P';
  76:	80 e5       	ldi	r24, 0x50	; 80
  78:	09 c0       	rjmp	.+18     	; 0x8c <send_sensor_data+0x36>
			break;
		case 1:
			data = get_ADC(GROUND_FRONT);
  7a:	85 e0       	ldi	r24, 0x05	; 5
  7c:	82 d2       	rcall	.+1284   	; 0x582 <get_ADC>
  7e:	28 2f       	mov	r18, r24
			UDR0 = 'F';
  80:	86 e4       	ldi	r24, 0x46	; 70
  82:	04 c0       	rjmp	.+8      	; 0x8c <send_sensor_data+0x36>
			break;
		case 2:
			data = get_ADC(GROUND_BACK);
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	7d d2       	rcall	.+1274   	; 0x582 <get_ADC>
  88:	28 2f       	mov	r18, r24
			UDR0 = 'B';
  8a:	82 e4       	ldi	r24, 0x42	; 66
  8c:	80 93 c6 00 	sts	0x00C6, r24
			break;
		default:
			break;
	}

	while ( !( UCSR0A & (1<<UDRE0)) );
  90:	80 91 c0 00 	lds	r24, 0x00C0
  94:	85 ff       	sbrs	r24, 5
  96:	fc cf       	rjmp	.-8      	; 0x90 <send_sensor_data+0x3a>
	UDR0 = data/100+'0';
  98:	82 2f       	mov	r24, r18
  9a:	64 e6       	ldi	r22, 0x64	; 100
  9c:	14 d3       	rcall	.+1576   	; 0x6c6 <__udivmodqi4>
  9e:	80 5d       	subi	r24, 0xD0	; 208
  a0:	80 93 c6 00 	sts	0x00C6, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
  a4:	80 91 c0 00 	lds	r24, 0x00C0
  a8:	85 ff       	sbrs	r24, 5
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <send_sensor_data+0x4e>
	UDR0 = (data%100)/10+'0';
  ac:	82 2f       	mov	r24, r18
  ae:	64 e6       	ldi	r22, 0x64	; 100
  b0:	0a d3       	rcall	.+1556   	; 0x6c6 <__udivmodqi4>
  b2:	89 2f       	mov	r24, r25
  b4:	6a e0       	ldi	r22, 0x0A	; 10
  b6:	07 d3       	rcall	.+1550   	; 0x6c6 <__udivmodqi4>
  b8:	80 5d       	subi	r24, 0xD0	; 208
  ba:	80 93 c6 00 	sts	0x00C6, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
  be:	80 91 c0 00 	lds	r24, 0x00C0
  c2:	85 ff       	sbrs	r24, 5
  c4:	fc cf       	rjmp	.-8      	; 0xbe <send_sensor_data+0x68>
	UDR0 = (data%10)+'0';
  c6:	82 2f       	mov	r24, r18
  c8:	6a e0       	ldi	r22, 0x0A	; 10
  ca:	fd d2       	rcall	.+1530   	; 0x6c6 <__udivmodqi4>
  cc:	90 5d       	subi	r25, 0xD0	; 208
  ce:	90 93 c6 00 	sts	0x00C6, r25
	
	while ( !( UCSR0A & (1<<UDRE0)) );
  d2:	80 91 c0 00 	lds	r24, 0x00C0
  d6:	85 ff       	sbrs	r24, 5
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <send_sensor_data+0x7c>
	UDR0 = ENTER;
  da:	8d e0       	ldi	r24, 0x0D	; 13
  dc:	80 93 c6 00 	sts	0x00C6, r24
}
  e0:	08 95       	ret

000000e2 <__vector_18>:

/*Interrupts*/
ISR(USART_RX_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	4f 93       	push	r20
  f2:	5f 93       	push	r21
  f4:	6f 93       	push	r22
  f6:	7f 93       	push	r23
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31

Special:
@ - stop motors
?-start motors
*/
	cli();
 104:	f8 94       	cli
	char a = UDR0;
 106:	80 91 c6 00 	lds	r24, 0x00C6
	switch(a)
 10a:	83 32       	cpi	r24, 0x23	; 35
 10c:	79 f0       	breq	.+30     	; 0x12c <__vector_18+0x4a>
 10e:	84 32       	cpi	r24, 0x24	; 36
 110:	18 f4       	brcc	.+6      	; 0x118 <__vector_18+0x36>
 112:	81 32       	cpi	r24, 0x21	; 33
 114:	01 f5       	brne	.+64     	; 0x156 <__vector_18+0x74>
 116:	05 c0       	rjmp	.+10     	; 0x122 <__vector_18+0x40>
 118:	8f 33       	cpi	r24, 0x3F	; 63
 11a:	a1 f0       	breq	.+40     	; 0x144 <__vector_18+0x62>
 11c:	80 34       	cpi	r24, 0x40	; 64
 11e:	d9 f4       	brne	.+54     	; 0x156 <__vector_18+0x74>
 120:	0f c0       	rjmp	.+30     	; 0x140 <__vector_18+0x5e>
	{
		case '!':
			/*begin new data frame*/
			current_byte = 0;
 122:	10 92 01 01 	sts	0x0101, r1
			new_command = FALSE;
 126:	10 92 00 01 	sts	0x0100, r1
 12a:	26 c0       	rjmp	.+76     	; 0x178 <__vector_18+0x96>
			break;		
		case '#':
			/*end of data frame*/
			command[current_byte] = '\0';
 12c:	e0 91 01 01 	lds	r30, 0x0101
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	ed 5f       	subi	r30, 0xFD	; 253
 134:	fe 4f       	sbci	r31, 0xFE	; 254
 136:	10 82       	st	Z, r1
			new_command = TRUE;	
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 00 01 	sts	0x0100, r24
 13e:	1c c0       	rjmp	.+56     	; 0x178 <__vector_18+0x96>
			break;
			
		case '@':
			stop();
 140:	bc d2       	rcall	.+1400   	; 0x6ba <stop>
 142:	1a c0       	rjmp	.+52     	; 0x178 <__vector_18+0x96>
			break;
		case '?':
			motor(RIGHT, FORWARD, 80);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	40 e5       	ldi	r20, 0x50	; 80
 14a:	6f d2       	rcall	.+1246   	; 0x62a <motor>
			motor(LEFT, FORWARD, 80);
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	40 e5       	ldi	r20, 0x50	; 80
 152:	6b d2       	rcall	.+1238   	; 0x62a <motor>
 154:	11 c0       	rjmp	.+34     	; 0x178 <__vector_18+0x96>
			break;
			
		default:
			/*get data*/
			command[current_byte]  = a;
 156:	e0 91 01 01 	lds	r30, 0x0101
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	ed 5f       	subi	r30, 0xFD	; 253
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	80 83       	st	Z, r24
			current_byte++;
 162:	80 91 01 01 	lds	r24, 0x0101
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	80 93 01 01 	sts	0x0101, r24
			if(current_byte > (FRAME_LENGHT-1))	current_byte = 0;
 16c:	80 91 01 01 	lds	r24, 0x0101
 170:	8f 30       	cpi	r24, 0x0F	; 15
 172:	10 f0       	brcs	.+4      	; 0x178 <__vector_18+0x96>
 174:	10 92 01 01 	sts	0x0101, r1
			break;
	}
	sei();
 178:	78 94       	sei
}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <main>:

int main(void)
{
 19c:	3f 92       	push	r3
 19e:	4f 92       	push	r4
 1a0:	5f 92       	push	r5
 1a2:	6f 92       	push	r6
 1a4:	7f 92       	push	r7
 1a6:	8f 92       	push	r8
 1a8:	9f 92       	push	r9
 1aa:	af 92       	push	r10
 1ac:	bf 92       	push	r11
 1ae:	cf 92       	push	r12
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	df 93       	push	r29
 1bc:	cf 93       	push	r28
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <main+0x24>
 1c0:	0f 92       	push	r0
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
	unsigned char last_front = 0;
	unsigned char last_back = 0;
	
	/*Init*/
	/*Configure ports*/
	LED_DDR |= LED_BLUE | LED_RED | LED_GREEN;
 1c6:	87 b1       	in	r24, 0x07	; 7
 1c8:	8c 61       	ori	r24, 0x1C	; 28
 1ca:	87 b9       	out	0x07, r24	; 7
	LED_PORT |= LED_BLUE | LED_RED;
 1cc:	88 b1       	in	r24, 0x08	; 8
 1ce:	8c 60       	ori	r24, 0x0C	; 12
 1d0:	88 b9       	out	0x08, r24	; 8
	
	M_LEFT_DDR |= M_LEFT_1 | M_LEFT_2;
 1d2:	84 b1       	in	r24, 0x04	; 4
 1d4:	80 6c       	ori	r24, 0xC0	; 192
 1d6:	84 b9       	out	0x04, r24	; 4
	M_RIGHT_DDR_1 |= M_RIGHT_1;
 1d8:	20 9a       	sbi	0x04, 0	; 4
	M_RIGHT_DDR_2 |= M_RIGHT_2;
 1da:	57 9a       	sbi	0x0a, 7	; 10
	M_PWM_DDR |= M_PWM_A | M_PWM_B;
 1dc:	8a b1       	in	r24, 0x0a	; 10
 1de:	80 66       	ori	r24, 0x60	; 96
 1e0:	8a b9       	out	0x0a, r24	; 10
	
	/*UART*/
	UBRR0 = 25; /*19200 B*/
 1e2:	89 e1       	ldi	r24, 0x19	; 25
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 c5 00 	sts	0x00C5, r25
 1ea:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 1ee:	88 e9       	ldi	r24, 0x98	; 152
 1f0:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);	/*8-bit*/
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	80 93 c2 00 	sts	0x00C2, r24
	
	/*ADC*/
	ADMUX = (1<<REFS0)|(0<<REFS1)|(1<<ADLAR)|POWER; /*AVCC*/
 1fa:	80 e6       	ldi	r24, 0x60	; 96
 1fc:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN);
 200:	80 e8       	ldi	r24, 0x80	; 128
 202:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1<<ADSC); 
 206:	80 91 7a 00 	lds	r24, 0x007A
 20a:	80 64       	ori	r24, 0x40	; 64
 20c:	80 93 7a 00 	sts	0x007A, r24
	
	
	/*Timer0*/
	TCCR0A = (1<<COM0A1)|(0<<COM0A0)|(1<<COM0B1)|(0<<COM0B0)|(1<<WGM01)|(1<<WGM00); /*non-inverting mode, Fast PWM*/
 210:	83 ea       	ldi	r24, 0xA3	; 163
 212:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01); /*clk/8*/
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
 218:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 21a:	18 bc       	out	0x28, r1	; 40
	
	/*Enable interrupts*/
	sei();	
 21c:	78 94       	sei
 21e:	19 82       	std	Y+1, r1	; 0x01
 220:	bb 24       	eor	r11, r11
 222:	cc 24       	eor	r12, r12
 224:	1b 82       	std	Y+3, r1	; 0x03
 226:	1a 82       	std	Y+2, r1	; 0x02
 228:	00 e0       	ldi	r16, 0x00	; 0
 22a:	10 e0       	ldi	r17, 0x00	; 0
 22c:	ff 24       	eor	r15, r15
									break;
								case 'R':
									LED_PORT |= LED_BLUE;
									break;
								case 'T':
									LED_PORT ^= LED_BLUE;
 22e:	f8 e0       	ldi	r31, 0x08	; 8
 230:	7f 2e       	mov	r7, r31
									break;
								case 'R':
									LED_PORT |= LED_RED;
									break;
								case 'T':
									LED_PORT ^= LED_RED;
 232:	e4 e0       	ldi	r30, 0x04	; 4
 234:	6e 2e       	mov	r6, r30
							break;
						case 'D':
							motors(command[2]-'0', command[3]-'0');
							break;
						default:
							motor(command[1]-'0', command[2]-'0', ((command[3]-'0')*100+(command[4]-'0')*10+command[5]-'0'));
 236:	74 e6       	ldi	r23, 0x64	; 100
 238:	d7 2e       	mov	r13, r23
 23a:	6a e0       	ldi	r22, 0x0A	; 10
 23c:	e6 2e       	mov	r14, r22
				UDR0 = (data%100)/10+'0';
				while ( !( UCSR0A & (1<<UDRE0)) );
				UDR0 = (data%10)+'0';
				
				while ( !( UCSR0A & (1<<UDRE0)) );
				UDR0 = ENTER;
 23e:	5d e0       	ldi	r21, 0x0D	; 13
 240:	55 2e       	mov	r5, r21
						{
							UDR0 = 'G';
							stop();
						}
						last_front = data;
						UDR0 = 'F';
 242:	46 e4       	ldi	r20, 0x46	; 70
 244:	44 2e       	mov	r4, r20
						break;
					case 1:
						data = get_ADC(GROUND_FRONT);
						if((data > last_front + SAFETY_MARGIN || data < last_front - SAFETY_MARGIN) && safety_mode == 1)
						{
							UDR0 = 'G';
 246:	37 e4       	ldi	r19, 0x47	; 71
 248:	33 2e       	mov	r3, r19
				while (!( UCSR0A & (1<<UDRE0)));
				switch(sensor_number)
				{
					case 0:
						data = get_ADC(POWER);
						UDR0 = 'P';
 24a:	20 e5       	ldi	r18, 0x50	; 80
 24c:	a2 2e       	mov	r10, r18
						{
							UDR0 = 'C';
							stop();
						}
						last_back = data;
						UDR0 = 'B';
 24e:	92 e4       	ldi	r25, 0x42	; 66
 250:	99 2e       	mov	r9, r25
						break;
					case 2:
						data = get_ADC(GROUND_BACK);
						if((data > last_back + SAFETY_MARGIN || data < last_back - SAFETY_MARGIN) && safety_mode == 1)
						{
							UDR0 = 'C';
 252:	83 e4       	ldi	r24, 0x43	; 67
 254:	88 2e       	mov	r8, r24
 256:	04 c0       	rjmp	.+8      	; 0x260 <main+0xc4>
	TCCR0B = (1<<CS01); /*clk/8*/
	OCR0A = 0;
	OCR0B = 0;
	
	/*Enable interrupts*/
	sei();	
 258:	1b 82       	std	Y+3, r1	; 0x03
 25a:	1a 82       	std	Y+2, r1	; 0x02
 25c:	00 e0       	ldi	r16, 0x00	; 0
 25e:	10 e0       	ldi	r17, 0x00	; 0
	int time = 0;
	int time2 = 0;
	char sensor_number = 0;
	while(1)
	{
		if(new_command)
 260:	80 91 00 01 	lds	r24, 0x0100
 264:	88 23       	and	r24, r24
 266:	09 f4       	brne	.+2      	; 0x26a <main+0xce>
 268:	00 c1       	rjmp	.+512    	; 0x46a <main+0x2ce>
		{
			switch(command[0])
 26a:	80 91 03 01 	lds	r24, 0x0103
 26e:	8c 34       	cpi	r24, 0x4C	; 76
 270:	f9 f0       	breq	.+62     	; 0x2b0 <main+0x114>
 272:	8d 34       	cpi	r24, 0x4D	; 77
 274:	20 f4       	brcc	.+8      	; 0x27e <main+0xe2>
 276:	81 34       	cpi	r24, 0x41	; 65
 278:	09 f0       	breq	.+2      	; 0x27c <main+0xe0>
 27a:	f5 c0       	rjmp	.+490    	; 0x466 <main+0x2ca>
 27c:	07 c0       	rjmp	.+14     	; 0x28c <main+0xf0>
 27e:	8d 34       	cpi	r24, 0x4D	; 77
 280:	09 f4       	brne	.+2      	; 0x284 <main+0xe8>
 282:	41 c0       	rjmp	.+130    	; 0x306 <main+0x16a>
 284:	83 35       	cpi	r24, 0x53	; 83
 286:	09 f0       	breq	.+2      	; 0x28a <main+0xee>
 288:	ee c0       	rjmp	.+476    	; 0x466 <main+0x2ca>
 28a:	e3 c0       	rjmp	.+454    	; 0x452 <main+0x2b6>
			{
				case 'A':
					switch(command[1])
 28c:	80 91 04 01 	lds	r24, 0x0104
 290:	86 34       	cpi	r24, 0x46	; 70
 292:	31 f0       	breq	.+12     	; 0x2a0 <main+0x104>
 294:	80 35       	cpi	r24, 0x50	; 80
 296:	41 f0       	breq	.+16     	; 0x2a8 <main+0x10c>
 298:	82 34       	cpi	r24, 0x42	; 66
 29a:	09 f0       	breq	.+2      	; 0x29e <main+0x102>
 29c:	e4 c0       	rjmp	.+456    	; 0x466 <main+0x2ca>
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <main+0x108>
					{
						case 'F':
							send_number(get_ADC(GROUND_FRONT));
 2a0:	85 e0       	ldi	r24, 0x05	; 5
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <main+0x10e>
							break;
						case 'B':
							send_number(get_ADC(GROUND_BACK));
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <main+0x10e>
							break;
						case 'P':
							send_number(get_ADC(POWER));
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	6b d1       	rcall	.+726    	; 0x582 <get_ADC>
 2ac:	80 d1       	rcall	.+768    	; 0x5ae <send_number>
 2ae:	db c0       	rjmp	.+438    	; 0x466 <main+0x2ca>
						default:
							break;
					}
					break;
				case 'L':
					switch(command[1])
 2b0:	80 91 04 01 	lds	r24, 0x0104
 2b4:	82 34       	cpi	r24, 0x42	; 66
 2b6:	21 f0       	breq	.+8      	; 0x2c0 <main+0x124>
 2b8:	82 35       	cpi	r24, 0x52	; 82
 2ba:	09 f0       	breq	.+2      	; 0x2be <main+0x122>
 2bc:	d4 c0       	rjmp	.+424    	; 0x466 <main+0x2ca>
 2be:	11 c0       	rjmp	.+34     	; 0x2e2 <main+0x146>
					{
						case 'B':
							switch(command[2])
 2c0:	80 91 05 01 	lds	r24, 0x0105
 2c4:	83 35       	cpi	r24, 0x53	; 83
 2c6:	31 f0       	breq	.+12     	; 0x2d4 <main+0x138>
 2c8:	84 35       	cpi	r24, 0x54	; 84
 2ca:	41 f0       	breq	.+16     	; 0x2dc <main+0x140>
 2cc:	82 35       	cpi	r24, 0x52	; 82
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <main+0x136>
 2d0:	ca c0       	rjmp	.+404    	; 0x466 <main+0x2ca>
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <main+0x13c>
							{
								case 'S':
									LED_PORT &= ~LED_BLUE;
 2d4:	43 98       	cbi	0x08, 3	; 8
 2d6:	c7 c0       	rjmp	.+398    	; 0x466 <main+0x2ca>
									break;
								case 'R':
									LED_PORT |= LED_BLUE;
 2d8:	43 9a       	sbi	0x08, 3	; 8
 2da:	c5 c0       	rjmp	.+394    	; 0x466 <main+0x2ca>
									break;
								case 'T':
									LED_PORT ^= LED_BLUE;
 2dc:	88 b1       	in	r24, 0x08	; 8
 2de:	87 25       	eor	r24, r7
 2e0:	10 c0       	rjmp	.+32     	; 0x302 <main+0x166>
								default:
									break;
							}
							break;
						case 'R':
							switch(command[2])
 2e2:	80 91 05 01 	lds	r24, 0x0105
 2e6:	83 35       	cpi	r24, 0x53	; 83
 2e8:	31 f0       	breq	.+12     	; 0x2f6 <main+0x15a>
 2ea:	84 35       	cpi	r24, 0x54	; 84
 2ec:	41 f0       	breq	.+16     	; 0x2fe <main+0x162>
 2ee:	82 35       	cpi	r24, 0x52	; 82
 2f0:	09 f0       	breq	.+2      	; 0x2f4 <main+0x158>
 2f2:	b9 c0       	rjmp	.+370    	; 0x466 <main+0x2ca>
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <main+0x15e>
							{
								case 'S':
									LED_PORT &= ~LED_RED;
 2f6:	42 98       	cbi	0x08, 2	; 8
 2f8:	b6 c0       	rjmp	.+364    	; 0x466 <main+0x2ca>
									break;
								case 'R':
									LED_PORT |= LED_RED;
 2fa:	42 9a       	sbi	0x08, 2	; 8
 2fc:	b4 c0       	rjmp	.+360    	; 0x466 <main+0x2ca>
									break;
								case 'T':
									LED_PORT ^= LED_RED;
 2fe:	88 b1       	in	r24, 0x08	; 8
 300:	86 25       	eor	r24, r6
 302:	88 b9       	out	0x08, r24	; 8
 304:	b0 c0       	rjmp	.+352    	; 0x466 <main+0x2ca>
						default:
							break;
					}
					break;
				case 'M':
					switch(command[1])
 306:	80 91 04 01 	lds	r24, 0x0104
 30a:	84 34       	cpi	r24, 0x44	; 68
 30c:	09 f4       	brne	.+2      	; 0x310 <main+0x174>
 30e:	82 c0       	rjmp	.+260    	; 0x414 <main+0x278>
 310:	85 34       	cpi	r24, 0x45	; 69
 312:	20 f4       	brcc	.+8      	; 0x31c <main+0x180>
 314:	82 34       	cpi	r24, 0x42	; 66
 316:	09 f0       	breq	.+2      	; 0x31a <main+0x17e>
 318:	85 c0       	rjmp	.+266    	; 0x424 <main+0x288>
 31a:	07 c0       	rjmp	.+14     	; 0x32a <main+0x18e>
 31c:	80 35       	cpi	r24, 0x50	; 80
 31e:	69 f1       	breq	.+90     	; 0x37a <main+0x1de>
 320:	83 35       	cpi	r24, 0x53	; 83
 322:	09 f0       	breq	.+2      	; 0x326 <main+0x18a>
 324:	7f c0       	rjmp	.+254    	; 0x424 <main+0x288>
					{
						case 'S':
							stop();
 326:	c9 d1       	rcall	.+914    	; 0x6ba <stop>
 328:	9e c0       	rjmp	.+316    	; 0x466 <main+0x2ca>
							break;
						case 'B':
							motor(1, command[2]-'0', ((command[3]-'0')*100+(command[4]-'0')*10+command[5]-'0'));
 32a:	60 91 05 01 	lds	r22, 0x0105
 32e:	80 91 06 01 	lds	r24, 0x0106
 332:	20 91 07 01 	lds	r18, 0x0107
 336:	40 91 08 01 	lds	r20, 0x0108
 33a:	60 53       	subi	r22, 0x30	; 48
 33c:	40 5d       	subi	r20, 0xD0	; 208
 33e:	8d 9d       	mul	r24, r13
 340:	c0 01       	movw	r24, r0
 342:	11 24       	eor	r1, r1
 344:	48 0f       	add	r20, r24
 346:	2e 9d       	mul	r18, r14
 348:	90 01       	movw	r18, r0
 34a:	11 24       	eor	r1, r1
 34c:	42 0f       	add	r20, r18
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	6c d1       	rcall	.+728    	; 0x62a <motor>
							motor(2, command[6]-'0', ((command[7]-'0')*100+(command[8]-'0')*10+command[9]-'0'));
 352:	60 91 09 01 	lds	r22, 0x0109
 356:	80 91 0a 01 	lds	r24, 0x010A
 35a:	20 91 0b 01 	lds	r18, 0x010B
 35e:	40 91 0c 01 	lds	r20, 0x010C
 362:	60 53       	subi	r22, 0x30	; 48
 364:	40 5d       	subi	r20, 0xD0	; 208
 366:	8d 9d       	mul	r24, r13
 368:	c0 01       	movw	r24, r0
 36a:	11 24       	eor	r1, r1
 36c:	48 0f       	add	r20, r24
 36e:	2e 9d       	mul	r18, r14
 370:	90 01       	movw	r18, r0
 372:	11 24       	eor	r1, r1
 374:	42 0f       	add	r20, r18
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	6a c0       	rjmp	.+212    	; 0x44e <main+0x2b2>
							break;
						case 'P':
							switch(command[2])
 37a:	80 91 05 01 	lds	r24, 0x0105
 37e:	82 33       	cpi	r24, 0x32	; 50
 380:	31 f0       	breq	.+12     	; 0x38e <main+0x1f2>
 382:	82 34       	cpi	r24, 0x42	; 66
 384:	31 f1       	breq	.+76     	; 0x3d2 <main+0x236>
 386:	81 33       	cpi	r24, 0x31	; 49
 388:	09 f0       	breq	.+2      	; 0x38c <main+0x1f0>
 38a:	6d c0       	rjmp	.+218    	; 0x466 <main+0x2ca>
 38c:	11 c0       	rjmp	.+34     	; 0x3b0 <main+0x214>
							{
								case (LEFT+'0'):
									OCR0B =	((command[3]-'0')*100+(command[4]-'0')*10+command[5]-'0');
 38e:	80 91 06 01 	lds	r24, 0x0106
 392:	40 91 07 01 	lds	r20, 0x0107
 396:	20 91 08 01 	lds	r18, 0x0108
 39a:	20 5d       	subi	r18, 0xD0	; 208
 39c:	8d 9d       	mul	r24, r13
 39e:	c0 01       	movw	r24, r0
 3a0:	11 24       	eor	r1, r1
 3a2:	28 0f       	add	r18, r24
 3a4:	4e 9d       	mul	r20, r14
 3a6:	a0 01       	movw	r20, r0
 3a8:	11 24       	eor	r1, r1
 3aa:	24 0f       	add	r18, r20
 3ac:	28 bd       	out	0x28, r18	; 40
 3ae:	5b c0       	rjmp	.+182    	; 0x466 <main+0x2ca>
										break;
								case (RIGHT+'0'):
									OCR0A = ((command[3]-'0')*100+(command[4]-'0')*10+command[5]-'0');
 3b0:	80 91 06 01 	lds	r24, 0x0106
 3b4:	40 91 07 01 	lds	r20, 0x0107
 3b8:	20 91 08 01 	lds	r18, 0x0108
 3bc:	20 5d       	subi	r18, 0xD0	; 208
 3be:	8d 9d       	mul	r24, r13
 3c0:	c0 01       	movw	r24, r0
 3c2:	11 24       	eor	r1, r1
 3c4:	28 0f       	add	r18, r24
 3c6:	4e 9d       	mul	r20, r14
 3c8:	a0 01       	movw	r20, r0
 3ca:	11 24       	eor	r1, r1
 3cc:	24 0f       	add	r18, r20
 3ce:	27 bd       	out	0x27, r18	; 39
 3d0:	4a c0       	rjmp	.+148    	; 0x466 <main+0x2ca>
									break;
								case 'B':
									OCR0A = ((command[3]-'0')*100+(command[4]-'0')*10+command[5]-'0');
 3d2:	20 91 06 01 	lds	r18, 0x0106
 3d6:	40 91 07 01 	lds	r20, 0x0107
 3da:	80 91 08 01 	lds	r24, 0x0108
 3de:	80 5d       	subi	r24, 0xD0	; 208
 3e0:	2d 9d       	mul	r18, r13
 3e2:	90 01       	movw	r18, r0
 3e4:	11 24       	eor	r1, r1
 3e6:	82 0f       	add	r24, r18
 3e8:	4e 9d       	mul	r20, r14
 3ea:	a0 01       	movw	r20, r0
 3ec:	11 24       	eor	r1, r1
 3ee:	84 0f       	add	r24, r20
 3f0:	87 bd       	out	0x27, r24	; 39
									OCR0B =	((command[3]-'0')*100+(command[4]-'0')*10+command[5]-'0');
 3f2:	20 91 06 01 	lds	r18, 0x0106
 3f6:	40 91 07 01 	lds	r20, 0x0107
 3fa:	80 91 08 01 	lds	r24, 0x0108
 3fe:	80 5d       	subi	r24, 0xD0	; 208
 400:	2d 9d       	mul	r18, r13
 402:	90 01       	movw	r18, r0
 404:	11 24       	eor	r1, r1
 406:	82 0f       	add	r24, r18
 408:	4e 9d       	mul	r20, r14
 40a:	a0 01       	movw	r20, r0
 40c:	11 24       	eor	r1, r1
 40e:	84 0f       	add	r24, r20
 410:	88 bd       	out	0x28, r24	; 40
 412:	29 c0       	rjmp	.+82     	; 0x466 <main+0x2ca>
								default:
									break;
							}
							break;
						case 'D':
							motors(command[2]-'0', command[3]-'0');
 414:	80 91 05 01 	lds	r24, 0x0105
 418:	60 91 06 01 	lds	r22, 0x0106
 41c:	60 53       	subi	r22, 0x30	; 48
 41e:	80 53       	subi	r24, 0x30	; 48
 420:	2b d1       	rcall	.+598    	; 0x678 <motors>
 422:	21 c0       	rjmp	.+66     	; 0x466 <main+0x2ca>
							break;
						default:
							motor(command[1]-'0', command[2]-'0', ((command[3]-'0')*100+(command[4]-'0')*10+command[5]-'0'));
 424:	80 91 04 01 	lds	r24, 0x0104
 428:	60 91 05 01 	lds	r22, 0x0105
 42c:	20 91 06 01 	lds	r18, 0x0106
 430:	e0 91 07 01 	lds	r30, 0x0107
 434:	40 91 08 01 	lds	r20, 0x0108
 438:	60 53       	subi	r22, 0x30	; 48
 43a:	40 5d       	subi	r20, 0xD0	; 208
 43c:	2d 9d       	mul	r18, r13
 43e:	90 01       	movw	r18, r0
 440:	11 24       	eor	r1, r1
 442:	42 0f       	add	r20, r18
 444:	ee 9d       	mul	r30, r14
 446:	f0 01       	movw	r30, r0
 448:	11 24       	eor	r1, r1
 44a:	4e 0f       	add	r20, r30
 44c:	80 53       	subi	r24, 0x30	; 48
 44e:	ed d0       	rcall	.+474    	; 0x62a <motor>
 450:	0a c0       	rjmp	.+20     	; 0x466 <main+0x2ca>
							break;
					}
					break;
				case 'S':
					switch(command[1])
 452:	80 91 04 01 	lds	r24, 0x0104
 456:	82 35       	cpi	r24, 0x52	; 82
 458:	29 f0       	breq	.+10     	; 0x464 <main+0x2c8>
 45a:	83 35       	cpi	r24, 0x53	; 83
 45c:	21 f4       	brne	.+8      	; 0x466 <main+0x2ca>
 45e:	21 e0       	ldi	r18, 0x01	; 1
 460:	29 83       	std	Y+1, r18	; 0x01
 462:	01 c0       	rjmp	.+2      	; 0x466 <main+0x2ca>
 464:	19 82       	std	Y+1, r1	; 0x01
					break;
				default:
					break;
			}
			
			new_command = FALSE; /*clear flag*/
 466:	10 92 00 01 	sts	0x0100, r1
			
		}
		time++;
 46a:	8a 81       	ldd	r24, Y+2	; 0x02
 46c:	9b 81       	ldd	r25, Y+3	; 0x03
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	9b 83       	std	Y+3, r25	; 0x03
 472:	8a 83       	std	Y+2, r24	; 0x02
		if(time == 10000)
 474:	80 51       	subi	r24, 0x10	; 16
 476:	97 42       	sbci	r25, 0x27	; 39
 478:	09 f0       	breq	.+2      	; 0x47c <main+0x2e0>
 47a:	f2 ce       	rjmp	.-540    	; 0x260 <main+0xc4>
		{
			time = 0;
			time2++;
 47c:	0f 5f       	subi	r16, 0xFF	; 255
 47e:	1f 4f       	sbci	r17, 0xFF	; 255
			if(time2 > 2)
 480:	03 30       	cpi	r16, 0x03	; 3
 482:	11 05       	cpc	r17, r1
 484:	1c f4       	brge	.+6      	; 0x48c <main+0x2f0>
 486:	1b 82       	std	Y+3, r1	; 0x03
 488:	1a 82       	std	Y+2, r1	; 0x02
 48a:	ea ce       	rjmp	.-556    	; 0x260 <main+0xc4>
			{
				unsigned char data = 0;
				while (!( UCSR0A & (1<<UDRE0)));
 48c:	80 91 c0 00 	lds	r24, 0x00C0
 490:	85 ff       	sbrs	r24, 5
 492:	fc cf       	rjmp	.-8      	; 0x48c <main+0x2f0>
				switch(sensor_number)
 494:	f1 e0       	ldi	r31, 0x01	; 1
 496:	ff 16       	cp	r15, r31
 498:	69 f0       	breq	.+26     	; 0x4b4 <main+0x318>
 49a:	ff 16       	cp	r15, r31
 49c:	28 f0       	brcs	.+10     	; 0x4a8 <main+0x30c>
 49e:	22 e0       	ldi	r18, 0x02	; 2
 4a0:	f2 16       	cp	r15, r18
 4a2:	19 f1       	breq	.+70     	; 0x4ea <main+0x34e>
 4a4:	10 e0       	ldi	r17, 0x00	; 0
 4a6:	3b c0       	rjmp	.+118    	; 0x51e <__stack+0x1f>
				{
					case 0:
						data = get_ADC(POWER);
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	6b d0       	rcall	.+214    	; 0x582 <get_ADC>
 4ac:	18 2f       	mov	r17, r24
						UDR0 = 'P';
 4ae:	a0 92 c6 00 	sts	0x00C6, r10
 4b2:	35 c0       	rjmp	.+106    	; 0x51e <__stack+0x1f>
						break;
					case 1:
						data = get_ADC(GROUND_FRONT);
 4b4:	85 e0       	ldi	r24, 0x05	; 5
 4b6:	65 d0       	rcall	.+202    	; 0x582 <get_ADC>
 4b8:	18 2f       	mov	r17, r24
						if((data > last_front + SAFETY_MARGIN || data < last_front - SAFETY_MARGIN) && safety_mode == 1)
 4ba:	48 2f       	mov	r20, r24
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	2b 2d       	mov	r18, r11
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	c9 01       	movw	r24, r18
 4c4:	4e 96       	adiw	r24, 0x1e	; 30
 4c6:	84 17       	cp	r24, r20
 4c8:	95 07       	cpc	r25, r21
 4ca:	2c f0       	brlt	.+10     	; 0x4d6 <main+0x33a>
 4cc:	2e 51       	subi	r18, 0x1E	; 30
 4ce:	30 40       	sbci	r19, 0x00	; 0
 4d0:	42 17       	cp	r20, r18
 4d2:	53 07       	cpc	r21, r19
 4d4:	34 f4       	brge	.+12     	; 0x4e2 <main+0x346>
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	19 f4       	brne	.+6      	; 0x4e2 <main+0x346>
						{
							UDR0 = 'G';
 4dc:	30 92 c6 00 	sts	0x00C6, r3
							stop();
 4e0:	ec d0       	rcall	.+472    	; 0x6ba <stop>
						}
						last_front = data;
						UDR0 = 'F';
 4e2:	40 92 c6 00 	sts	0x00C6, r4
 4e6:	b1 2e       	mov	r11, r17
 4e8:	1a c0       	rjmp	.+52     	; 0x51e <__stack+0x1f>
						break;
					case 2:
						data = get_ADC(GROUND_BACK);
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	4a d0       	rcall	.+148    	; 0x582 <get_ADC>
 4ee:	18 2f       	mov	r17, r24
						if((data > last_back + SAFETY_MARGIN || data < last_back - SAFETY_MARGIN) && safety_mode == 1)
 4f0:	48 2f       	mov	r20, r24
 4f2:	50 e0       	ldi	r21, 0x00	; 0
 4f4:	2c 2d       	mov	r18, r12
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	c9 01       	movw	r24, r18
 4fa:	4e 96       	adiw	r24, 0x1e	; 30
 4fc:	84 17       	cp	r24, r20
 4fe:	95 07       	cpc	r25, r21
 500:	2c f0       	brlt	.+10     	; 0x50c <__stack+0xd>
 502:	2e 51       	subi	r18, 0x1E	; 30
 504:	30 40       	sbci	r19, 0x00	; 0
 506:	42 17       	cp	r20, r18
 508:	53 07       	cpc	r21, r19
 50a:	34 f4       	brge	.+12     	; 0x518 <__stack+0x19>
 50c:	99 81       	ldd	r25, Y+1	; 0x01
 50e:	91 30       	cpi	r25, 0x01	; 1
 510:	19 f4       	brne	.+6      	; 0x518 <__stack+0x19>
						{
							UDR0 = 'C';
 512:	80 92 c6 00 	sts	0x00C6, r8
							stop();
 516:	d1 d0       	rcall	.+418    	; 0x6ba <stop>
						}
						last_back = data;
						UDR0 = 'B';
 518:	90 92 c6 00 	sts	0x00C6, r9
 51c:	c1 2e       	mov	r12, r17
						break;
					default:
						break;
				}

				while ( !( UCSR0A & (1<<UDRE0)) );
 51e:	80 91 c0 00 	lds	r24, 0x00C0
 522:	85 ff       	sbrs	r24, 5
 524:	fc cf       	rjmp	.-8      	; 0x51e <__stack+0x1f>
				UDR0 = data/100+'0';
 526:	81 2f       	mov	r24, r17
 528:	64 e6       	ldi	r22, 0x64	; 100
 52a:	cd d0       	rcall	.+410    	; 0x6c6 <__udivmodqi4>
 52c:	80 5d       	subi	r24, 0xD0	; 208
 52e:	80 93 c6 00 	sts	0x00C6, r24
				while ( !( UCSR0A & (1<<UDRE0)) );
 532:	80 91 c0 00 	lds	r24, 0x00C0
 536:	85 ff       	sbrs	r24, 5
 538:	fc cf       	rjmp	.-8      	; 0x532 <__stack+0x33>
				UDR0 = (data%100)/10+'0';
 53a:	81 2f       	mov	r24, r17
 53c:	64 e6       	ldi	r22, 0x64	; 100
 53e:	c3 d0       	rcall	.+390    	; 0x6c6 <__udivmodqi4>
 540:	89 2f       	mov	r24, r25
 542:	6a e0       	ldi	r22, 0x0A	; 10
 544:	c0 d0       	rcall	.+384    	; 0x6c6 <__udivmodqi4>
 546:	80 5d       	subi	r24, 0xD0	; 208
 548:	80 93 c6 00 	sts	0x00C6, r24
				while ( !( UCSR0A & (1<<UDRE0)) );
 54c:	80 91 c0 00 	lds	r24, 0x00C0
 550:	85 ff       	sbrs	r24, 5
 552:	fc cf       	rjmp	.-8      	; 0x54c <__stack+0x4d>
				UDR0 = (data%10)+'0';
 554:	81 2f       	mov	r24, r17
 556:	6a e0       	ldi	r22, 0x0A	; 10
 558:	b6 d0       	rcall	.+364    	; 0x6c6 <__udivmodqi4>
 55a:	90 5d       	subi	r25, 0xD0	; 208
 55c:	90 93 c6 00 	sts	0x00C6, r25
				
				while ( !( UCSR0A & (1<<UDRE0)) );
 560:	80 91 c0 00 	lds	r24, 0x00C0
 564:	85 ff       	sbrs	r24, 5
 566:	fc cf       	rjmp	.-8      	; 0x560 <__stack+0x61>
				UDR0 = ENTER;
 568:	50 92 c6 00 	sts	0x00C6, r5
				sensor_number++;
 56c:	f3 94       	inc	r15
				if(sensor_number >= 3)	sensor_number = 0;
 56e:	e2 e0       	ldi	r30, 0x02	; 2
 570:	ef 15       	cp	r30, r15
 572:	08 f0       	brcs	.+2      	; 0x576 <__stack+0x77>
 574:	71 ce       	rjmp	.-798    	; 0x258 <main+0xbc>
 576:	1b 82       	std	Y+3, r1	; 0x03
 578:	1a 82       	std	Y+2, r1	; 0x02
 57a:	00 e0       	ldi	r16, 0x00	; 0
 57c:	10 e0       	ldi	r17, 0x00	; 0
 57e:	ff 24       	eor	r15, r15
 580:	6f ce       	rjmp	.-802    	; 0x260 <main+0xc4>

00000582 <get_ADC>:
*********************************/
#include "adc.h"

char get_ADC(char chanel)
{
	ADMUX &= 0xf0; 
 582:	90 91 7c 00 	lds	r25, 0x007C
 586:	90 7f       	andi	r25, 0xF0	; 240
 588:	90 93 7c 00 	sts	0x007C, r25
	ADMUX |= chanel; 
 58c:	90 91 7c 00 	lds	r25, 0x007C
 590:	98 2b       	or	r25, r24
 592:	90 93 7c 00 	sts	0x007C, r25
  
	ADCSRA |= 1<<ADSC; 
 596:	80 91 7a 00 	lds	r24, 0x007A
 59a:	80 64       	ori	r24, 0x40	; 64
 59c:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & (1<<ADSC));
 5a0:	80 91 7a 00 	lds	r24, 0x007A
 5a4:	86 fd       	sbrc	r24, 6
 5a6:	fc cf       	rjmp	.-8      	; 0x5a0 <get_ADC+0x1e>
	//ADCSRA &= ~((1 << ADSC) | (1 << ADIF));
	//ADCSRA |= 1<<ADSC;
	//while(ADCSRA & (1<<ADSC));	
	//ADCSRA &= ~((1 << ADSC) | (1 << ADIF));
	return ADCH;
 5a8:	80 91 79 00 	lds	r24, 0x0079
 5ac:	08 95       	ret

000005ae <send_number>:
UART
*********************************/
#include "uart.h"

void send_number(unsigned char n)
{
 5ae:	28 2f       	mov	r18, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
 5b0:	80 91 c0 00 	lds	r24, 0x00C0
 5b4:	85 ff       	sbrs	r24, 5
 5b6:	fc cf       	rjmp	.-8      	; 0x5b0 <send_number+0x2>
	UDR0 = n/100+'0';
 5b8:	82 2f       	mov	r24, r18
 5ba:	64 e6       	ldi	r22, 0x64	; 100
 5bc:	84 d0       	rcall	.+264    	; 0x6c6 <__udivmodqi4>
 5be:	80 5d       	subi	r24, 0xD0	; 208
 5c0:	80 93 c6 00 	sts	0x00C6, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
 5c4:	80 91 c0 00 	lds	r24, 0x00C0
 5c8:	85 ff       	sbrs	r24, 5
 5ca:	fc cf       	rjmp	.-8      	; 0x5c4 <send_number+0x16>
	UDR0 = (n%100)/10+'0';
 5cc:	82 2f       	mov	r24, r18
 5ce:	64 e6       	ldi	r22, 0x64	; 100
 5d0:	7a d0       	rcall	.+244    	; 0x6c6 <__udivmodqi4>
 5d2:	89 2f       	mov	r24, r25
 5d4:	6a e0       	ldi	r22, 0x0A	; 10
 5d6:	77 d0       	rcall	.+238    	; 0x6c6 <__udivmodqi4>
 5d8:	80 5d       	subi	r24, 0xD0	; 208
 5da:	80 93 c6 00 	sts	0x00C6, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
 5de:	80 91 c0 00 	lds	r24, 0x00C0
 5e2:	85 ff       	sbrs	r24, 5
 5e4:	fc cf       	rjmp	.-8      	; 0x5de <send_number+0x30>
	UDR0 = (n%10)+'0';
 5e6:	82 2f       	mov	r24, r18
 5e8:	6a e0       	ldi	r22, 0x0A	; 10
 5ea:	6d d0       	rcall	.+218    	; 0x6c6 <__udivmodqi4>
 5ec:	90 5d       	subi	r25, 0xD0	; 208
 5ee:	90 93 c6 00 	sts	0x00C6, r25
	while ( !( UCSR0A & (1<<UDRE0)) );
 5f2:	80 91 c0 00 	lds	r24, 0x00C0
 5f6:	85 ff       	sbrs	r24, 5
 5f8:	fc cf       	rjmp	.-8      	; 0x5f2 <send_number+0x44>
	UDR0 = ENTER;
 5fa:	8d e0       	ldi	r24, 0x0D	; 13
 5fc:	80 93 c6 00 	sts	0x00C6, r24
}
 600:	08 95       	ret

00000602 <send_string>:

void send_string(char* data)
{
 602:	fc 01       	movw	r30, r24
 604:	07 c0       	rjmp	.+14     	; 0x614 <send_string+0x12>
	int i = 0;
	while(data[i] != '\0')
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
 606:	80 91 c0 00 	lds	r24, 0x00C0
 60a:	85 ff       	sbrs	r24, 5
 60c:	fc cf       	rjmp	.-8      	; 0x606 <send_string+0x4>
		UDR0 = data[i];
 60e:	90 93 c6 00 	sts	0x00C6, r25
 612:	31 96       	adiw	r30, 0x01	; 1
}

void send_string(char* data)
{
	int i = 0;
	while(data[i] != '\0')
 614:	90 81       	ld	r25, Z
 616:	99 23       	and	r25, r25
 618:	b1 f7       	brne	.-20     	; 0x606 <send_string+0x4>
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
		UDR0 = data[i];
		i++;
	}
	while ( !( UCSR0A & (1<<UDRE0)) );
 61a:	80 91 c0 00 	lds	r24, 0x00C0
 61e:	85 ff       	sbrs	r24, 5
 620:	fc cf       	rjmp	.-8      	; 0x61a <send_string+0x18>
	UDR0 = ENTER;
 622:	8d e0       	ldi	r24, 0x0D	; 13
 624:	80 93 c6 00 	sts	0x00C6, r24
 628:	08 95       	ret

0000062a <motor>:
#include "motor.h"
#include "board_def.h"

void motor(unsigned char side,unsigned char state, unsigned char pwm)
{
	if(side == LEFT)
 62a:	82 30       	cpi	r24, 0x02	; 2
 62c:	91 f4       	brne	.+36     	; 0x652 <motor+0x28>
	{
		OCR0B = pwm;
 62e:	48 bd       	out	0x28, r20	; 40
		switch(state)
 630:	61 30       	cpi	r22, 0x01	; 1
 632:	61 f0       	breq	.+24     	; 0x64c <motor+0x22>
 634:	61 30       	cpi	r22, 0x01	; 1
 636:	18 f0       	brcs	.+6      	; 0x63e <motor+0x14>
 638:	62 30       	cpi	r22, 0x02	; 2
 63a:	e9 f4       	brne	.+58     	; 0x676 <motor+0x4c>
 63c:	04 c0       	rjmp	.+8      	; 0x646 <motor+0x1c>
		{
			case STOP:
				M_LEFT_PORT &= ~(M_LEFT_1 | M_LEFT_2);
 63e:	85 b1       	in	r24, 0x05	; 5
 640:	8f 73       	andi	r24, 0x3F	; 63
 642:	85 b9       	out	0x05, r24	; 5
 644:	08 95       	ret
				break;
			case BACK:
				M_LEFT_PORT &= ~M_LEFT_1;
 646:	2e 98       	cbi	0x05, 6	; 5
				M_LEFT_PORT |= M_LEFT_2;
 648:	2f 9a       	sbi	0x05, 7	; 5
 64a:	08 95       	ret
				break;
			case FORWARD:
				M_LEFT_PORT |= M_LEFT_1;
 64c:	2e 9a       	sbi	0x05, 6	; 5
				M_LEFT_PORT &= ~M_LEFT_2;
 64e:	2f 98       	cbi	0x05, 7	; 5
 650:	08 95       	ret
				break;
			default:
				break;
		}
	}
	else if(side == RIGHT)
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	81 f4       	brne	.+32     	; 0x676 <motor+0x4c>
	{
		OCR0A = pwm;
 656:	47 bd       	out	0x27, r20	; 39
		switch(state)
 658:	61 30       	cpi	r22, 0x01	; 1
 65a:	41 f0       	breq	.+16     	; 0x66c <motor+0x42>
 65c:	61 30       	cpi	r22, 0x01	; 1
 65e:	18 f0       	brcs	.+6      	; 0x666 <motor+0x3c>
 660:	62 30       	cpi	r22, 0x02	; 2
 662:	49 f4       	brne	.+18     	; 0x676 <motor+0x4c>
 664:	06 c0       	rjmp	.+12     	; 0x672 <motor+0x48>
		{
			case STOP:
				M_RIGHT_PORT_1 &= ~M_RIGHT_1;
 666:	28 98       	cbi	0x05, 0	; 5
				M_RIGHT_PORT_2 &= ~M_RIGHT_2;
 668:	5f 98       	cbi	0x0b, 7	; 11
 66a:	08 95       	ret
				break;
			case FORWARD:
				M_RIGHT_PORT_1 &= ~M_RIGHT_1;
 66c:	28 98       	cbi	0x05, 0	; 5
				M_RIGHT_PORT_2 |= M_RIGHT_2;
 66e:	5f 9a       	sbi	0x0b, 7	; 11
 670:	08 95       	ret
				break;
			case BACK:
				M_RIGHT_PORT_1 |= M_RIGHT_1;
 672:	28 9a       	sbi	0x05, 0	; 5
				M_RIGHT_PORT_2 &= ~M_RIGHT_2;
 674:	5f 98       	cbi	0x0b, 7	; 11
 676:	08 95       	ret

00000678 <motors>:
		}
	
	}
}
void motors(unsigned char state_right, unsigned char state_left)
{
 678:	98 2f       	mov	r25, r24
	switch(state_left)
 67a:	61 30       	cpi	r22, 0x01	; 1
 67c:	61 f0       	breq	.+24     	; 0x696 <motors+0x1e>
 67e:	61 30       	cpi	r22, 0x01	; 1
 680:	18 f0       	brcs	.+6      	; 0x688 <motors+0x10>
 682:	62 30       	cpi	r22, 0x02	; 2
 684:	51 f4       	brne	.+20     	; 0x69a <motors+0x22>
 686:	04 c0       	rjmp	.+8      	; 0x690 <motors+0x18>
	{
		case STOP:
			M_LEFT_PORT &= ~(M_LEFT_1 | M_LEFT_2);
 688:	85 b1       	in	r24, 0x05	; 5
 68a:	8f 73       	andi	r24, 0x3F	; 63
 68c:	85 b9       	out	0x05, r24	; 5
 68e:	05 c0       	rjmp	.+10     	; 0x69a <motors+0x22>
			break;
		case BACK:
			M_LEFT_PORT &= ~M_LEFT_1;
 690:	2e 98       	cbi	0x05, 6	; 5
			M_LEFT_PORT |= M_LEFT_2;
 692:	2f 9a       	sbi	0x05, 7	; 5
 694:	02 c0       	rjmp	.+4      	; 0x69a <motors+0x22>
			break;
		case FORWARD:
			M_LEFT_PORT |= M_LEFT_1;
 696:	2e 9a       	sbi	0x05, 6	; 5
			M_LEFT_PORT &= ~M_LEFT_2;
 698:	2f 98       	cbi	0x05, 7	; 5
			break;
		default:
			break;
	}
	switch(state_right)
 69a:	91 30       	cpi	r25, 0x01	; 1
 69c:	41 f0       	breq	.+16     	; 0x6ae <motors+0x36>
 69e:	91 30       	cpi	r25, 0x01	; 1
 6a0:	18 f0       	brcs	.+6      	; 0x6a8 <motors+0x30>
 6a2:	92 30       	cpi	r25, 0x02	; 2
 6a4:	49 f4       	brne	.+18     	; 0x6b8 <motors+0x40>
 6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <motors+0x3c>
	{
		case STOP:
			M_RIGHT_PORT_1 &= ~M_RIGHT_1;
 6a8:	28 98       	cbi	0x05, 0	; 5
			M_RIGHT_PORT_2 &= ~M_RIGHT_2;
 6aa:	5f 98       	cbi	0x0b, 7	; 11
 6ac:	08 95       	ret
			break;
		case FORWARD:
			M_RIGHT_PORT_1 &= ~M_RIGHT_1;
 6ae:	28 98       	cbi	0x05, 0	; 5
			M_RIGHT_PORT_2 |= M_RIGHT_2;
 6b0:	5f 9a       	sbi	0x0b, 7	; 11
 6b2:	08 95       	ret
			break;
		case BACK:
			M_RIGHT_PORT_1 |= M_RIGHT_1;
 6b4:	28 9a       	sbi	0x05, 0	; 5
			M_RIGHT_PORT_2 &= ~M_RIGHT_2;
 6b6:	5f 98       	cbi	0x0b, 7	; 11
 6b8:	08 95       	ret

000006ba <stop>:
	}
}

void stop(void)
{
	M_LEFT_PORT &= ~(M_LEFT_1 | M_LEFT_2);
 6ba:	85 b1       	in	r24, 0x05	; 5
 6bc:	8f 73       	andi	r24, 0x3F	; 63
 6be:	85 b9       	out	0x05, r24	; 5
	M_RIGHT_PORT_1 &= ~M_RIGHT_1;
 6c0:	28 98       	cbi	0x05, 0	; 5
	M_RIGHT_PORT_2 &= ~M_RIGHT_2;
 6c2:	5f 98       	cbi	0x0b, 7	; 11
}
 6c4:	08 95       	ret

000006c6 <__udivmodqi4>:
 6c6:	99 1b       	sub	r25, r25
 6c8:	79 e0       	ldi	r23, 0x09	; 9
 6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <__udivmodqi4_ep>

000006cc <__udivmodqi4_loop>:
 6cc:	99 1f       	adc	r25, r25
 6ce:	96 17       	cp	r25, r22
 6d0:	08 f0       	brcs	.+2      	; 0x6d4 <__udivmodqi4_ep>
 6d2:	96 1b       	sub	r25, r22

000006d4 <__udivmodqi4_ep>:
 6d4:	88 1f       	adc	r24, r24
 6d6:	7a 95       	dec	r23
 6d8:	c9 f7       	brne	.-14     	; 0x6cc <__udivmodqi4_loop>
 6da:	80 95       	com	r24
 6dc:	08 95       	ret

000006de <_exit>:
 6de:	f8 94       	cli

000006e0 <__stop_program>:
 6e0:	ff cf       	rjmp	.-2      	; 0x6e0 <__stop_program>
